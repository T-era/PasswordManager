パスワードを管理するツール。
管理の強度については保証しない。以下を読んで下さい、あとは自己責任。

<<<< 用語 >>>>
・ パスワード
　このアプリが管理する対象。Webのサービスごとにそれぞれ設定してるでしょ？
・ マスタパスワード
　パスワードをファイルに書き出すのは流石にアレなので、暗号化します。暗号化キーとなるパスワードが「マスタパスワード」。
　管理対象のパスワードとは異なるものにすることを推奨。

【主設定ファイル】
　アプリケーション全体の設定を保存するファイルです。
　置き場所はOSによるユーザ領域にすることを推奨。
　インストーラを使うと、拡張ytelをアプリに紐付けてくれる。

! ファイルには、マスタパスワードのSHA512ハッシュ値を含みます。

【データフォルダ】
　管理対象のパスワードのファイル置場。
　OSによるユーザ領域内にすることを推奨。
　このフォルダ内には、各サービスごとにフォルダが切られ、設定ファイルとパスワードファイルが配置されます。
　なので、データフォルダ内に余分なフォルダを作ってしまうとアプリが実行できなくなります。

【設定ファイル in データフォルダ】
　管理するパスワードの補足情報を保持します。
　パスワードの長さとか、使ってよい文字など。主にパスワード生成に必要な情報が含まれます。

! サービスのURLなどを、平文で保持します。URLや備考に秘匿情報を含まないように注意してください。

【パスワードファイル in データフォルダ】
　暗号化したパスワードを保持します。

! Rfc2898で暗号化したパスワードを保持します。

<<<< 何ができるの？ >>>>
・ パスワードの一元管理
　各サービスのパスワードを覚えておくより、たった一つのマスタパスワードを覚えておく方が簡単。
・ パスワードの生成
　ボタンタッチだけで、暗号乱数によるパスワードを発行します。
　サービスごとに使用できる文字/長さが異なる場合にも、設定ファイルがルールを保持しているので簡単。
　　((パスワード長はn 〜 m 文字 で指定できますが、長めに設定することを推奨。どうせ覚えないんだから、ぐーーんと長くしてしまえ。))

<<<< 留意事項 >>>>
　アプリケーション実行中は、パスワードは画面表示されることがあります。また.Netのヒープ領域に平文でパスワードを保持します。
　一般的に、アプリケーション(.Netランタイム)のライフサイクルを短く保ったり、あるいはウィルス対策やスクリーンロックなどを併用することで安全に使用できるかも知れません。最初に言ったとおり、自己責任。
